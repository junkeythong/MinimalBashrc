# Export some cool env
# export KUBECONFIG, PATH

# Define some useful aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ll='ls -la'
alias cp='cp --interactive'
alias mv='mv --interactive'
alias rm='rm --interactive'

# Move to Trash instead of rm, use in Linux.
# Trash can be cleaned up periodically by cron job. 
alias rm='mv -t ~/.Trash'

# Set working namespace by default, 'default' namespace should not be used.
DEFAULT_NS='default_working_ns'

if ! kubectl cluster-info > /dev/null 2>&1; then
    echo "Cannot connect to the cluster. Skipping namespace creation."
else
    if ! kubectl get ns $DEFAULT_NS > /dev/null 2>&1; then
        if kubectl create ns $DEFAULT_NS > /dev/null 2>&1; then
            echo "Namespace $DEFAULT_NS created successfully."
        else
            echo "Failed to create namespace $DEFAULT_NS."
        fi
    else
        echo "Default namespace $DEFAULT_NS already exists. Skipping creation."
    fi
fi

# Set the default namespace if not already set
if [[ ! $KUBECTL_NS ]]; then
    export KUBECTL_NS="$DEFAULT_NS"
fi
export KUBECTL_NS_PARAM="--namespace $KUBECTL_NS"

# Should be update submodule also
gitp() {
    git pull "$@" && git submodule update
}

gitl() {
    git log --oneline "$@"
}

gits() {
    git status "$@"
}

gitb() {
    git branch "$@"
}

gitpush() {
    git push "$@"
}

gitc() {
    git checkout "$@"
}

# Get the list of modified files in the current commit
gitchanges() {
    git log -1 --name-only --pretty=format:"" | cat -v
}

# Quick amend the changes to the current commit
gitamend() {
    git commit --amend --no-edit
}

# By sorting the time creation, we easily check new namespace
ns() {
    kubectl get ns "$@" --sort-by=.metadata.creationTimestamp
}

po() {
    kubectl get pods $KUBECTL_NS_PARAM "$@"
}

# Quick go to working directory
cd1() {
    cd /path/to/main_repo
}

# Quick go to testing directory
cd2() {
    cd /path/to/test_repo
}

# Quick edit bashrc
editbash() {
    vi /home/user/.bashrc
}

# Quick source the bashrc
sourcebash() {
    source /home/user/.bashrc
}

# Function to get the containers in a pod
ctn() {
    pod_name=$1
    if [[ ! $pod_name ]]; then
        echo "Please provide the pod name to get its containers!"
        return 1
    else
        list_containers=$(k get pod "$pod_name" -o jsonpath='{.spec.initContainers[*].name}{"\n"}{.spec.containers[*].name}' $KUBECTL_NS_PARAM 2>/dev/null)
        if [[ ! $list_containers ]]; then
            echo "Failed to get container list in Pod $pod_name!"
            return 1
        else
            for container in $list_containers; do
                echo $container
            done
        fi
        echo
    fi
}

# Function to switch kubectl namespace
kns() {
    new_ns=$1
    if [[ ! $new_ns ]]; then
        # print current namespace if no new namespace is provided
        echo "$KUBECTL_NS"
        return 0
    fi

    # Check if we can connect to the cluster
    if ! kubectl cluster-info > /dev/null 2>&1; then
        echo "Cannot connect to the cluster. Cannot switch namespace."
    # Apply the color to the command line output
        return 1
    fi

    # Check if new namespace exists
    if kubectl get ns "$new_ns" > /dev/null 2>&1; then
        export KUBECTL_NS="$new_ns"
        export KUBECTL_NS_PARAM="--namespace $KUBECTL_NS"
        alias k="kubectl $KUBECTL_NS_PARAM"
        alias h="helm $KUBECTL_NS_PARAM"
        echo "Switched to namespace: $KUBECTL_NS"
    else
        echo "Namespace $new_ns does not exist, still using: $KUBECTL_NS"
    fi
}

# Quick clone the working directory to the test directory
reposync() {
    rsync -aPv /your/main-repo /your/test-repo
}

# Function to switch kubeconfig if we are working multiple cluster as the same time.
ek() {
    home_kube=~/.kube
    new_kube=$1
    if [[ ! $new_kube ]]; then
        # print current context if no new kubeconfig is provided
        echo "$KUBECONFIG"
    elif [[ ! -f "$home_kube/$new_kube.yaml" ]]; then
        echo "$home_kube/$new_kube.yaml does not exist, still use: $KUBECONFIG"
    else
        echo "Switched to $new_kube"
        export KUBECONFIG="$home_kube/$new_kube.yaml"
    fi
}

# Function to get the current git branch
parse_git_branch() {
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
    else
        # Echo empty string if not in a git repo directory
        echo ""
    fi
}

# Function to show the last commit message to avoid amend wrong commit
get_last_commit_message() {
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        git log -1 --oneline | cut -d ' ' -f2-
    else
        # Echo empty string if not in a git repo directory
        echo ""
    fi
}

# Function to show the current k8s context
get_k8s_context() {
        kubectl config get-contexts --no-headers=true | grep '*' | awk -F ' ' '{print $2}'
}

headsgit() {
    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
        echo "Not inside a Git repo"
        return 1
    fi
    local branch=$(git symbolic-ref --short HEAD 2>/dev/null || echo "(detached HEAD)")
    local remote="origin"

    echo "Current LOCAL branch: $branch"
    local format="%C(auto)%h %an %ad %s"
    local local_head=$(git --no-pager show -s --format="$format" HEAD)
    local fetch_head="(No FETCH_HEAD - run 'git fetch')"
    if [ -f .git/FETCH_HEAD ]; then
        fetch_head=$(git --no-pager show -s --format="$format" FETCH_HEAD 2>/dev/null)
    fi
    git fetch $remote $branch &>/dev/null
    local remote_head="Remote branch: $remote/$branch not found"
    if git rev-parse --verify "$remote/$branch" &>/dev/null; then
        remote_head=$(git --no-pager show -s --format="$format" "$remote/$branch")
    fi

    printf "%-13s %s\n" "LOCAL HEAD:" "$local_head"
    printf "%-13s %s\n" "FETCH HEAD:" "$fetch_head"
    printf "%-13s %s\n" "REMOTE HEAD:" "$remote_head"

   echo "Remote branches:"
   git branch -r --format="%(refname:short)" | sort
}

get_btc_price() {
    curl -s https://api.coinbase.com/v2/prices/BTC-USD/spot | jq -r '.data.amount'
}

COL="\[\e[1;30m\]"
RED="\[\e[01;31m\]"
GREEN="\[\e[01;32m\]"
YELLOW="\[\e[01;33m\]"
BLUE="\[\e[01;34m\]"
REVERSE_BLUE="\[\e[07;34m\]"
PURPLE="\[\e[01;35m\]"
CYAN="\[\e[01;36m\]"
WHITE="\[\e[01;37m\]"
BLINK_WHITE_ON_RED="\[\e[5m\e[41m\e[37m\]"
ITALIC_GREEN="\[\e[03;32m\]"
ITALIC_CYAN="\[\e[03;36m\]"
DARK_GRAY="\[\e[01;30m\]"
BRIGHT_YELLOW="\[\e[01;33m\]"
RESET="\[\e[0m\]"

DEFAULT_CONTEXT="default_working_context"
# Function to reload the prompt
reload_ps() {
    curr_config="$(get_k8s_context)"
    curr_branch="$(parse_git_branch)"

    if [[ "$curr_config" != "$DEFAULT_CONTEXT" ]]; then
        # Highlight the k8s context if it's not the default working context
        context_format="${REVERSE_BLUE}<\$(get_k8s_context)>${RESET}"
    else
        context_format="${BLUE}<\$(get_k8s_context)>${RESET}"
    fi

    if [[ "$curr_branch" == "(master)" ]] || [[ "$curr_branch" == "(main)" ]]; then
        # Highlight the git branch if it's master branch as we should not work directly in master branch
        branch_format="${BLINK_WHITE_ON_RED}\$(parse_git_branch)${RESET}"
    else
        branch_format="${ITALIC_GREEN}\$(parse_git_branch)${RESET}"
    fi

    # Highlight it if it's the 'default' namespace.
    if [[ "$KUBECTL_NS" == "default" ]]; then
        # Highlight the namespace if it's the default one
        namespace_format="${BLINK_WHITE_ON_RED}(\$(kns))${RESET}"
    else
        namespace_format="${ITALIC_CYAN}(\$(kns))${RESET}"
    fi

    # Format for BTC price
    btc_format="${GREEN}(\$(get_btc_price))${RESET}"
    # Format for displaying the current time, helpful for debugging
    time_format="${RED}(\t)${RESET}"
    # Format for displaying the hostname, helpful when working with multiple hosts
    host_format="${PURPLE}(\h)${RESET}"
    # Format for displaying the last commit message, avoid amend wrong commit
    commit_message_format="${DARK_GRAY}(\$(get_last_commit_message))${RESET}"
    # Format for displaying the current working directory
    path_format="${WHITE}[\w]${RESET}"
    # Format for displaying color of the command line
    screen_format="${BRIGHT_YELLOW}\$(echo \$STY)${RESET}"
    # Tag name, local or VPS or something
    tag_format="${BLINK_WHITE_ON_RED}<local>${RESET}"

    # Final PS1
    PS1="${tag_format}${btc_format}${time_format}${host_format}${context_format}${namespace_format}${branch_format}${commit_message_format}${path_format}${screen_format} \n--> ${COL}"
}
# Call the function to reload the prompt to get latest information every new line
PROMPT_COMMAND='reload_ps'

# Using the default namespace and working directory here
# But should be turned off in ssh automation.
kns $DEFAULT_NS
cd1
